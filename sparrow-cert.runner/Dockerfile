FROM mcr.microsoft.com/dotnet/aspnet:8.0.6-noble-amd64
ENV ASPNET_VERSION=8.0.6

ARG BUILD_VERSION
ARG REPO_NAME
ARG REPO_PATH
ARG AUTHOR
ARG NAMESPACE
ARG GIT_COMMIT_ID
ARG PROJECT_NAME
ARG TEMPLATE_TYPE
ARG PROJECT_ENVIRONMENT
ARG EXPOSED_HTTPS_PORT
ARG EXPOSED_HTTP_PORT
ARG CONTAINER_PORT
ARG APP_UID
ARG APP_GID
ARG APP_USERNAME

ARG PROJECT_OUTPUT
ARG PROJECT_ARCH
ARG PROJECT_FRAMEWORK
ARG PROJECT_CERT_JSON_B64

RUN echo "BUILD_VERSION: ${BUILD_VERSION}"
RUN echo "REPO_NAME: ${REPO_NAME}"
RUN echo "REPO_PATH: ${REPO_PATH}"
RUN echo "AUTHOR: ${AUTHOR}"
RUN echo "NAMESPACE: ${NAMESPACE}"
RUN echo "GIT_COMMIT_ID: ${GIT_COMMIT_ID}"
RUN echo "PROJECT_NAME: ${PROJECT_NAME}"
RUN echo "TEMPLATE_TYPE: ${TEMPLATE_TYPE}"
RUN echo "PROJECT_ENVIRONMENT: ${PROJECT_ENVIRONMENT}"
RUN echo "EXPOSED_HTTP_PORT: ${EXPOSED_HTTP_PORT}"
RUN echo "EXPOSED_HTTPS_PORT: ${EXPOSED_HTTPS_PORT}"
RUN echo "CONTAINER_PORT: ${CONTAINER_PORT}"
RUN echo "APP_UID: ${APP_UID}"
RUN echo "APP_GID: ${APP_GID}"
RUN echo "APP_USERNAME: ${APP_USERNAME}"

# dotnet only
RUN echo "PROJECT_OUTPUT: ${PROJECT_OUTPUT}"
RUN echo "PROJECT_ARCH: ${PROJECT_ARCH}"
RUN echo "PROJECT_FRAMEWORK: ${PROJECT_FRAMEWORK}"

RUN groupadd -g $APP_GID $APP_USERNAME
RUN useradd -u $APP_UID -g $APP_GID $APP_USERNAME

ENV SPARROW_CFG_PATH=/etc/ssl/sparrow-cert/
ENV PROJECT_CERT_JSON_PATH=${SPARROW_CFG_PATH}cert.json
RUN mkdir -p ${SPARROW_CFG_PATH} \
    && echo "${PROJECT_CERT_JSON_B64}" | base64 --decode > ${PROJECT_CERT_JSON_PATH} \
    && ls -la ${SPARROW_CFG_PATH}
RUN chown -R ${APP_UID}:${APP_GID} ${SPARROW_CFG_PATH} \
    && ls -la ${SPARROW_CFG_PATH}

ENV CONTAINER_PORT=${CONTAINER_PORT}
ENV ASPNETCORE_ENVIRONMENT=${PROJECT_ENVIRONMENT}

LABEL org.opencontainers.image.title=${PROJECT_NAME}
LABEL org.opencontainers.image.description="Docker image for ${PROJECT_NAME}"
LABEL org.opencontainers.image.version=${BUILD_VERSION}
LABEL org.opencontainers.image.authors=${AUTHOR}

EXPOSE ${CONTAINER_PORT}
EXPOSE ${EXPOSED_HTTP_PORT}
EXPOSE ${EXPOSED_HTTPS_PORT}

USER $APP_UID:$APP_GID

COPY ${PROJECT_OUTPUT}/ app/
ENV EXECUTABLE=${PROJECT_NAME}
RUN ls -la app/

WORKDIR /app
ENTRYPOINT ["dotnet", "/app/sparrow-cert.runner.dll", "/etc/ssl/sparrow-cert/cert.json" ]
